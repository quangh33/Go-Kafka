syntax = "proto3";

package api;

option go_package = "github.com/quangh33/go-kafka/api";

// The core service for our Kafka-like system.
service Kafka {
  // Producer RPC to send a single message.
  rpc Produce(ProduceRequest) returns (ProduceResponse);

  // Consumer RPC to fetch a message from a specific offset.
  rpc Consume(ConsumeRequest) returns (ConsumeResponse);

  // New RPCs for offset management
  rpc CommitOffset(CommitOffsetRequest) returns (CommitOffsetResponse) {}
  rpc FetchOffset(FetchOffsetRequest) returns (FetchOffsetResponse) {}
  // Join is called by a new node to join the cluster.
  rpc Join(JoinRequest) returns (JoinResponse) {}

  // consumer -> coordinator to ask to join a group
  rpc JoinGroup(JoinGroupRequest) returns (JoinGroupResponse);
  // distribute partition assignment
  rpc SyncGroup(SyncGroupRequest) returns (SyncGroupResponse);
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
}

// A single record or message.
message Record {
  bytes value = 1;
  int64 offset = 2; // The offset of the *next* record.
}

enum ErrorCode {
  OK = 0;
  NOT_LEADER = 1;
  REBALANCE_IN_PROGRESS = 2;
  UNKNOWN_MEMBER_ID = 3;
}

enum AckLevel {
  NONE = 0; // Fire-and-forget, no response needed
  ALL = 1;  // Wait for a quorum of nodes to commit the message
}

// Request payload for the Produce RPC.
message ProduceRequest {
  string topic = 1;
  uint32 partition = 2;
  bytes value = 3; // The message content.
  AckLevel ack = 4; // The requested acknowledgment level
}

// Response payload for the Produce RPC.
message ProduceResponse {
  int64 offset = 1;
  ErrorCode error_code = 2;
  string leader_addr = 3; // Address of the current leader if this node is not it.
  // When a client sends a request to a broker that isn't the leader,
  // the broker can now respond with an error and provide the correct leader's address,
  // allowing the client to automatically retry the request with the right node.
}

// Request payload for the Consume RPC.
message ConsumeRequest {
  string topic = 1;
  uint32 partition = 2;
  int64 offset = 3;
}

// Response payload for the Consume RPC.
message ConsumeResponse {
  Record record = 1;
}

// -- Offset Management Messages --

message CommitOffsetRequest {
  string consumer_group_id = 1;
  string topic = 2;
  uint32 partition = 3;
  int64 offset = 4;
}

message CommitOffsetResponse {} // Empty response is fine for a successful commit

message FetchOffsetRequest {
  string consumer_group_id = 1;
  string topic = 2;
  uint32 partition = 3;
}

message FetchOffsetResponse {
  int64 offset = 1;
}

message JoinRequest {
  string node_id = 1;
  string raft_addr = 2;
  string grpc_addr = 3;
}

message JoinResponse {}

// "Hello, I am consumer [consumer_id] and I want to join group [group_id] to read from topic [topic]."
message JoinGroupRequest {
  string group_id = 1;
  string consumer_id = 2; // A unique ID for this consumer instance
  string topic = 3;
}

message TopicMetadata {
  // Can be extended later
}

message JoinGroupResponse {
  ErrorCode error_code = 1;
  string leader_id = 2;   // The consumer_id of the elected group leader
  bool is_leader = 3;
  // The following fields are ONLY sent to the group leader. These are all the information consumer leader needs to
  // create an assignment plan
  map<string, TopicMetadata> members = 4; // map consumer id to its metadata
  repeated uint32 partitions = 5;
}

// consumer leader sends this request to coordinator after it figured out the partition assignment
message SyncGroupRequest {
  string group_id = 1;
  string consumer_id = 2;
  // The leader sends the full assignment. Followers send an empty map.
  map<string, PartitionAssignment> assignments = 3;
  // e.g. {"consumer-A": [0, 1], "consumer-B": [2, 3]}
}

// The coordinator uses this to send each consumer its specific piece of the assignment plan.
message SyncGroupResponse {
  ErrorCode error_code = 1;
  PartitionAssignment assignment = 2; // The partitions assigned to this specific consumer
}

message PartitionAssignment {
  repeated uint32 partitions = 1;
}

// The consumer sends this to the coordinator every few seconds to prevent its session from timing out.
message HeartbeatRequest {
  string group_id = 1;
  string consumer_id = 2;
}

message HeartbeatResponse {
  ErrorCode error_code = 1;
}