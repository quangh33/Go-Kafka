// api/kafka.proto
// This file defines the initial, simple contract for our messaging system.
// It specifies the basic RPCs for producing and consuming messages from a single log.

syntax = "proto3";

package api;

option go_package = "github.com/quangh33/go-kafka/api";

// The core service for our Kafka-like system.
service Kafka {
  // Producer RPC to send a single message.
  rpc Produce(ProduceRequest) returns (ProduceResponse);

  // Consumer RPC to fetch a message from a specific offset.
  rpc Consume(ConsumeRequest) returns (ConsumeResponse);

  // New RPCs for offset management
  rpc CommitOffset(CommitOffsetRequest) returns (CommitOffsetResponse) {}
  rpc FetchOffset(FetchOffsetRequest) returns (FetchOffsetResponse) {}
}

// A single record or message.
message Record {
  bytes value = 1;
  int64 offset = 2; // The offset of the *next* record.
}

// Request payload for the Produce RPC.
message ProduceRequest {
  string topic = 1;
  uint32 partition = 2;
  bytes value = 3; // The message content.
}

// Response payload for the Produce RPC.
message ProduceResponse {
  string topic = 1;
  uint32 partition = 2;
  int64 offset = 3; // The offset the message was written to.
}

// Request payload for the Consume RPC.
message ConsumeRequest {
  string topic = 1;
  uint32 partition = 2;
  int64 offset = 3;
}

// Response payload for the Consume RPC.
message ConsumeResponse {
  Record record = 1;
}

// -- Offset Management Messages --

message CommitOffsetRequest {
  string consumer_group_id = 1;
  string topic = 2;
  uint32 partition = 3;
  int64 offset = 4;
}

message CommitOffsetResponse {} // Empty response is fine for a successful commit

message FetchOffsetRequest {
  string consumer_group_id = 1;
  string topic = 2;
  uint32 partition = 3;
}

message FetchOffsetResponse {
  int64 offset = 1;
}
