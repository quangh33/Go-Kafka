syntax = "proto3";

package api;

option go_package = "github.com/quangh33/go-kafka/api";

// The core service for our Kafka-like system.
service Kafka {
  // Producer RPC to send a single message.
  rpc Produce(ProduceRequest) returns (ProduceResponse);

  // Consumer RPC to fetch a message from a specific offset.
  rpc Consume(ConsumeRequest) returns (ConsumeResponse);

  // New RPCs for offset management
  rpc CommitOffset(CommitOffsetRequest) returns (CommitOffsetResponse) {}
  rpc FetchOffset(FetchOffsetRequest) returns (FetchOffsetResponse) {}
  // Join is called by a new node to join the cluster.
  rpc Join(JoinRequest) returns (JoinResponse) {}
}

// A single record or message.
message Record {
  bytes value = 1;
  int64 offset = 2; // The offset of the *next* record.
}

enum ErrorCode {
  OK = 0;
  NOT_LEADER = 1;
}

enum AckLevel {
  NONE = 0; // Fire-and-forget, no response needed
  ALL = 1;  // Wait for a quorum of nodes to commit the message
}

// Request payload for the Produce RPC.
message ProduceRequest {
  string topic = 1;
  uint32 partition = 2;
  bytes value = 3; // The message content.
  AckLevel ack = 4; // The requested acknowledgment level
}

// Response payload for the Produce RPC.
message ProduceResponse {
  int64 offset = 1;
  ErrorCode error_code = 2;
  string leader_addr = 3; // Address of the current leader if this node is not it.
  // When a client sends a request to a broker that isn't the leader,
  // the broker can now respond with an error and provide the correct leader's address,
  // allowing the client to automatically retry the request with the right node.
}

// Request payload for the Consume RPC.
message ConsumeRequest {
  string topic = 1;
  uint32 partition = 2;
  int64 offset = 3;
}

// Response payload for the Consume RPC.
message ConsumeResponse {
  Record record = 1;
}

// -- Offset Management Messages --

message CommitOffsetRequest {
  string consumer_group_id = 1;
  string topic = 2;
  uint32 partition = 3;
  int64 offset = 4;
}

message CommitOffsetResponse {} // Empty response is fine for a successful commit

message FetchOffsetRequest {
  string consumer_group_id = 1;
  string topic = 2;
  uint32 partition = 3;
}

message FetchOffsetResponse {
  int64 offset = 1;
}

message JoinRequest {
  string node_id = 1;
  string raft_addr = 2;
  string grpc_addr = 3;
}

message JoinResponse {}
