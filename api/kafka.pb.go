// api/kafka.proto
// This file defines the initial, simple contract for our messaging system.
// It specifies the basic RPCs for producing and consuming messages from a single log.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: api/kafka.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A single record or message.
type Record struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         []byte                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Offset        int64                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"` // The offset of the *next* record.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Record) Reset() {
	*x = Record{}
	mi := &file_api_kafka_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_api_kafka_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_api_kafka_proto_rawDescGZIP(), []int{0}
}

func (x *Record) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Record) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// Request payload for the Produce RPC.
type ProduceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Topic         string                 `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Partition     uint32                 `protobuf:"varint,2,opt,name=partition,proto3" json:"partition,omitempty"`
	Value         []byte                 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"` // The message content.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProduceRequest) Reset() {
	*x = ProduceRequest{}
	mi := &file_api_kafka_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProduceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceRequest) ProtoMessage() {}

func (x *ProduceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_kafka_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceRequest.ProtoReflect.Descriptor instead.
func (*ProduceRequest) Descriptor() ([]byte, []int) {
	return file_api_kafka_proto_rawDescGZIP(), []int{1}
}

func (x *ProduceRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *ProduceRequest) GetPartition() uint32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *ProduceRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Response payload for the Produce RPC.
type ProduceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Topic         string                 `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Partition     uint32                 `protobuf:"varint,2,opt,name=partition,proto3" json:"partition,omitempty"`
	Offset        int64                  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"` // The offset the message was written to.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProduceResponse) Reset() {
	*x = ProduceResponse{}
	mi := &file_api_kafka_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProduceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceResponse) ProtoMessage() {}

func (x *ProduceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_kafka_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceResponse.ProtoReflect.Descriptor instead.
func (*ProduceResponse) Descriptor() ([]byte, []int) {
	return file_api_kafka_proto_rawDescGZIP(), []int{2}
}

func (x *ProduceResponse) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *ProduceResponse) GetPartition() uint32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *ProduceResponse) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// Request payload for the Consume RPC.
type ConsumeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Topic         string                 `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Partition     uint32                 `protobuf:"varint,2,opt,name=partition,proto3" json:"partition,omitempty"`
	Offset        int64                  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsumeRequest) Reset() {
	*x = ConsumeRequest{}
	mi := &file_api_kafka_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeRequest) ProtoMessage() {}

func (x *ConsumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_kafka_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeRequest.ProtoReflect.Descriptor instead.
func (*ConsumeRequest) Descriptor() ([]byte, []int) {
	return file_api_kafka_proto_rawDescGZIP(), []int{3}
}

func (x *ConsumeRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *ConsumeRequest) GetPartition() uint32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *ConsumeRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// Response payload for the Consume RPC.
type ConsumeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Record        *Record                `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsumeResponse) Reset() {
	*x = ConsumeResponse{}
	mi := &file_api_kafka_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeResponse) ProtoMessage() {}

func (x *ConsumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_kafka_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeResponse.ProtoReflect.Descriptor instead.
func (*ConsumeResponse) Descriptor() ([]byte, []int) {
	return file_api_kafka_proto_rawDescGZIP(), []int{4}
}

func (x *ConsumeResponse) GetRecord() *Record {
	if x != nil {
		return x.Record
	}
	return nil
}

type CommitOffsetRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ConsumerGroupId string                 `protobuf:"bytes,1,opt,name=consumer_group_id,json=consumerGroupId,proto3" json:"consumer_group_id,omitempty"`
	Topic           string                 `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	Partition       uint32                 `protobuf:"varint,3,opt,name=partition,proto3" json:"partition,omitempty"`
	Offset          int64                  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CommitOffsetRequest) Reset() {
	*x = CommitOffsetRequest{}
	mi := &file_api_kafka_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitOffsetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitOffsetRequest) ProtoMessage() {}

func (x *CommitOffsetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_kafka_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitOffsetRequest.ProtoReflect.Descriptor instead.
func (*CommitOffsetRequest) Descriptor() ([]byte, []int) {
	return file_api_kafka_proto_rawDescGZIP(), []int{5}
}

func (x *CommitOffsetRequest) GetConsumerGroupId() string {
	if x != nil {
		return x.ConsumerGroupId
	}
	return ""
}

func (x *CommitOffsetRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *CommitOffsetRequest) GetPartition() uint32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *CommitOffsetRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type CommitOffsetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitOffsetResponse) Reset() {
	*x = CommitOffsetResponse{}
	mi := &file_api_kafka_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitOffsetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitOffsetResponse) ProtoMessage() {}

func (x *CommitOffsetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_kafka_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitOffsetResponse.ProtoReflect.Descriptor instead.
func (*CommitOffsetResponse) Descriptor() ([]byte, []int) {
	return file_api_kafka_proto_rawDescGZIP(), []int{6}
}

type FetchOffsetRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ConsumerGroupId string                 `protobuf:"bytes,1,opt,name=consumer_group_id,json=consumerGroupId,proto3" json:"consumer_group_id,omitempty"`
	Topic           string                 `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	Partition       uint32                 `protobuf:"varint,3,opt,name=partition,proto3" json:"partition,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FetchOffsetRequest) Reset() {
	*x = FetchOffsetRequest{}
	mi := &file_api_kafka_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchOffsetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchOffsetRequest) ProtoMessage() {}

func (x *FetchOffsetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_kafka_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchOffsetRequest.ProtoReflect.Descriptor instead.
func (*FetchOffsetRequest) Descriptor() ([]byte, []int) {
	return file_api_kafka_proto_rawDescGZIP(), []int{7}
}

func (x *FetchOffsetRequest) GetConsumerGroupId() string {
	if x != nil {
		return x.ConsumerGroupId
	}
	return ""
}

func (x *FetchOffsetRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *FetchOffsetRequest) GetPartition() uint32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

type FetchOffsetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Offset        int64                  `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchOffsetResponse) Reset() {
	*x = FetchOffsetResponse{}
	mi := &file_api_kafka_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchOffsetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchOffsetResponse) ProtoMessage() {}

func (x *FetchOffsetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_kafka_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchOffsetResponse.ProtoReflect.Descriptor instead.
func (*FetchOffsetResponse) Descriptor() ([]byte, []int) {
	return file_api_kafka_proto_rawDescGZIP(), []int{8}
}

func (x *FetchOffsetResponse) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

var File_api_kafka_proto protoreflect.FileDescriptor

const file_api_kafka_proto_rawDesc = "" +
	"\n" +
	"\x0fapi/kafka.proto\x12\x03api\"6\n" +
	"\x06Record\x12\x14\n" +
	"\x05value\x18\x01 \x01(\fR\x05value\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x03R\x06offset\"Z\n" +
	"\x0eProduceRequest\x12\x14\n" +
	"\x05topic\x18\x01 \x01(\tR\x05topic\x12\x1c\n" +
	"\tpartition\x18\x02 \x01(\rR\tpartition\x12\x14\n" +
	"\x05value\x18\x03 \x01(\fR\x05value\"]\n" +
	"\x0fProduceResponse\x12\x14\n" +
	"\x05topic\x18\x01 \x01(\tR\x05topic\x12\x1c\n" +
	"\tpartition\x18\x02 \x01(\rR\tpartition\x12\x16\n" +
	"\x06offset\x18\x03 \x01(\x03R\x06offset\"\\\n" +
	"\x0eConsumeRequest\x12\x14\n" +
	"\x05topic\x18\x01 \x01(\tR\x05topic\x12\x1c\n" +
	"\tpartition\x18\x02 \x01(\rR\tpartition\x12\x16\n" +
	"\x06offset\x18\x03 \x01(\x03R\x06offset\"6\n" +
	"\x0fConsumeResponse\x12#\n" +
	"\x06record\x18\x01 \x01(\v2\v.api.RecordR\x06record\"\x8d\x01\n" +
	"\x13CommitOffsetRequest\x12*\n" +
	"\x11consumer_group_id\x18\x01 \x01(\tR\x0fconsumerGroupId\x12\x14\n" +
	"\x05topic\x18\x02 \x01(\tR\x05topic\x12\x1c\n" +
	"\tpartition\x18\x03 \x01(\rR\tpartition\x12\x16\n" +
	"\x06offset\x18\x04 \x01(\x03R\x06offset\"\x16\n" +
	"\x14CommitOffsetResponse\"t\n" +
	"\x12FetchOffsetRequest\x12*\n" +
	"\x11consumer_group_id\x18\x01 \x01(\tR\x0fconsumerGroupId\x12\x14\n" +
	"\x05topic\x18\x02 \x01(\tR\x05topic\x12\x1c\n" +
	"\tpartition\x18\x03 \x01(\rR\tpartition\"-\n" +
	"\x13FetchOffsetResponse\x12\x16\n" +
	"\x06offset\x18\x01 \x01(\x03R\x06offset2\xfe\x01\n" +
	"\x05Kafka\x124\n" +
	"\aProduce\x12\x13.api.ProduceRequest\x1a\x14.api.ProduceResponse\x124\n" +
	"\aConsume\x12\x13.api.ConsumeRequest\x1a\x14.api.ConsumeResponse\x12E\n" +
	"\fCommitOffset\x12\x18.api.CommitOffsetRequest\x1a\x19.api.CommitOffsetResponse\"\x00\x12B\n" +
	"\vFetchOffset\x12\x17.api.FetchOffsetRequest\x1a\x18.api.FetchOffsetResponse\"\x00B\"Z github.com/quangh33/go-kafka/apib\x06proto3"

var (
	file_api_kafka_proto_rawDescOnce sync.Once
	file_api_kafka_proto_rawDescData []byte
)

func file_api_kafka_proto_rawDescGZIP() []byte {
	file_api_kafka_proto_rawDescOnce.Do(func() {
		file_api_kafka_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_kafka_proto_rawDesc), len(file_api_kafka_proto_rawDesc)))
	})
	return file_api_kafka_proto_rawDescData
}

var file_api_kafka_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_api_kafka_proto_goTypes = []any{
	(*Record)(nil),               // 0: api.Record
	(*ProduceRequest)(nil),       // 1: api.ProduceRequest
	(*ProduceResponse)(nil),      // 2: api.ProduceResponse
	(*ConsumeRequest)(nil),       // 3: api.ConsumeRequest
	(*ConsumeResponse)(nil),      // 4: api.ConsumeResponse
	(*CommitOffsetRequest)(nil),  // 5: api.CommitOffsetRequest
	(*CommitOffsetResponse)(nil), // 6: api.CommitOffsetResponse
	(*FetchOffsetRequest)(nil),   // 7: api.FetchOffsetRequest
	(*FetchOffsetResponse)(nil),  // 8: api.FetchOffsetResponse
}
var file_api_kafka_proto_depIdxs = []int32{
	0, // 0: api.ConsumeResponse.record:type_name -> api.Record
	1, // 1: api.Kafka.Produce:input_type -> api.ProduceRequest
	3, // 2: api.Kafka.Consume:input_type -> api.ConsumeRequest
	5, // 3: api.Kafka.CommitOffset:input_type -> api.CommitOffsetRequest
	7, // 4: api.Kafka.FetchOffset:input_type -> api.FetchOffsetRequest
	2, // 5: api.Kafka.Produce:output_type -> api.ProduceResponse
	4, // 6: api.Kafka.Consume:output_type -> api.ConsumeResponse
	6, // 7: api.Kafka.CommitOffset:output_type -> api.CommitOffsetResponse
	8, // 8: api.Kafka.FetchOffset:output_type -> api.FetchOffsetResponse
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_api_kafka_proto_init() }
func file_api_kafka_proto_init() {
	if File_api_kafka_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_kafka_proto_rawDesc), len(file_api_kafka_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_kafka_proto_goTypes,
		DependencyIndexes: file_api_kafka_proto_depIdxs,
		MessageInfos:      file_api_kafka_proto_msgTypes,
	}.Build()
	File_api_kafka_proto = out.File
	file_api_kafka_proto_goTypes = nil
	file_api_kafka_proto_depIdxs = nil
}
